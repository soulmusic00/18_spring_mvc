<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dynamicQuery">

	<!--  
		
		# 동적 SQL

		- 마이바티스의 가장 강력한 기능 중 하나는 동적 SQL을 처리하는 방법이다. 
		- JSTL과 같이 <if> <when> <otherwise>를 사용하여 쿼리를 동적으로 사용할 수 있다. 
		- 공백이나 콤마를 붙이는 작업 , 제어문에 따라서 AND절과 OR절을 제어하기가 까다로울 수 있는데
	      마이바티스의 <trim> , <where> , <set>을 사용하여 보다 편리하게 구현할 수 있다.
	      
		- '' , "" 모두 사용 가능하다. test 식은 '' 문자열 비교는 ""를 권장한다.  	
			예시) 
				<when test = '조건식'>
				<when test = "조건식" >
				 
		- dao에서 전송된 단일 데이터 , pojo의 필드 , map프레임워크의 key값을 그대로 속성에 사용한다.
			예시)
			<if test='productCode != null '>
			<if test='onePageViewCount != 0'>  
			
		- (자주 실수하는 부분1) 조건식에서 연산자 사용시 && || 대신에 and , or 를 사용해야 한다.
		- (자주 실수하는 부분2) JSTL과 구문이 굉장히 비슷하여 JSTL형태로 Mybatis에서 작성하는 경우


			예시)
				       			 JSTL				    MyBatis 
			표기법 		:    	${}				/	     #{}
			if    		:  		<c:if>			/		 <if>
			choose		:  		<c:choose>  	/	   <choose>
			when		: 		<c:when>	 	/ 		 <when>
			otherwise 	: 		<c:otherwise> 	/ 	   <otherwise>		
			foreach		:		<c:forEach>		/	 	<foreach>
	
	-->

	<resultMap type="hashmap" id="orderMap">
		<result column="MEMBER_ID" 				property="memberId"/>
		<result column="MEMBER_NAME" 			property="memberName"/>
		<result column="HP" 					property="hp"/>
		<result column="EMAIL" 					property="email"/>
		<result column="REGIDENCE" 				property="regidence"/>
		<result column="PRODUCT_NAME" 			property="productName"/>
		<result column="PRODUCT_PRICE" 			property="productPrice"/>
		<result column="PRODUCT_DELIVERY_PRICE" property="productDeliveryPrice"/>
		<result column="ORDER_GOODS_QTY" 		property="orderGoodsQty"/>
		<result column="DELIVERY_STATE" 		property="deliveryState"/>
	</resultMap>

	<select id="list" resultMap="orderMap">
		SELECT
				M.MEMBER_ID 			 AS MEMBER_ID,
		        M.MEMBER_NAME 			 AS MEMBER_NAME,
		        M.HP					 AS HP,
		        M.EMAIL					 AS EMAIL,
		        M.REGIDENCE				 AS REGIDENCE,
		        P.PRODUCT_NAME 			 AS PRODUCT_NAME,
		        P.PRODUCT_PRICE 		 AS PRODUCT_PRICE,
		        P.PRODUCT_DELIVERY_PRICE AS PRODUCT_DELIVERY_PRICE,
		        O.ORDER_GOODS_QTY 		 AS ORDER_GOODS_QTY,
		        O.DELIVERY_STATE 		 AS DELIVERY_STATE
		FROM
				T_ORDER O
		     INNER JOIN T_MEMBER M 
		             ON M.MEMBER_ID = O.MEMBER_ID
			 INNER JOIN T_PRODUCT P
					 ON P.PRODUCT_CODE = O.PRODUCT_CODE
	</select>
	
	<select id="ifEx" parameterType="hashmap" resultMap="orderMap">
	
		SELECT
				M.MEMBER_ID 			 AS MEMBER_ID,
		        M.MEMBER_NAME 			 AS MEMBER_NAME,
		        M.HP					 AS HP,
		        M.EMAIL					 AS EMAIL,
		        M.REGIDENCE				 AS REGIDENCE,
		        P.PRODUCT_NAME 			 AS PRODUCT_NAME,
		        P.PRODUCT_PRICE 		 AS PRODUCT_PRICE,
		        P.PRODUCT_DELIVERY_PRICE AS PRODUCT_DELIVERY_PRICE,
		        O.ORDER_GOODS_QTY 		 AS ORDER_GOODS_QTY,
		        O.DELIVERY_STATE 		 AS DELIVERY_STATE
		FROM
				T_ORDER O
		     INNER JOIN T_MEMBER M 
		             ON M.MEMBER_ID = O.MEMBER_ID
			 INNER JOIN T_PRODUCT P
					 ON P.PRODUCT_CODE = O.PRODUCT_CODE
		WHERE
				<if test='searchKeyword == "all"'>
					M.MEMBER_ID LIKE CONCAT('%' , #{searchWord} , '%') 	   OR
					M.MEMBER_NAME LIKE CONCAT('%' , #{searchWord} , '%')   OR
					M.REGIDENCE LIKE CONCAT('%' , #{searchWord} , '%')     OR 
					P.PRODUCT_NAME LIKE CONCAT('%' , #{searchWord} , '%')  OR
					O.DELIVERY_STATE LIKE CONCAT('%' , #{searchWord} , '%')
				</if>
				<if test='searchKeyword == "memberId"'>
					M.MEMBER_ID LIKE CONCAT('%' , #{searchWord} , '%')
				</if>	
				<if test='searchKeyword.equals("memberName")'>
					M.MEMBER_NAME LIKE CONCAT('%' , #{searchWord} , '%')
				</if>	
				<if test='searchKeyword.equals("regidence")'>
					M.REGIDENCE LIKE CONCAT('%' , #{searchWord} , '%')
				</if>
				<if test="searchKeyword == 'productName'">
					P.PRODUCT_NAME LIKE CONCAT('%' , #{searchWord} , '%')
				</if>
				<if test="searchKeyword == 'deliveryState'">
					O.DELIVERY_STATE LIKE CONCAT('%' , #{searchWord} , '%')
				</if>
				
	</select>
	
	<select id="chooseEx01" parameterType="hashmap" resultMap="orderMap">
	
		SELECT
				M.MEMBER_ID 			 AS MEMBER_ID,
		        M.MEMBER_NAME 			 AS MEMBER_NAME,
		        M.HP					 AS HP,
		        M.EMAIL					 AS EMAIL,
		        M.REGIDENCE				 AS REGIDENCE,
		        P.PRODUCT_NAME 			 AS PRODUCT_NAME,
		        P.PRODUCT_PRICE 		 AS PRODUCT_PRICE,
		        P.PRODUCT_DELIVERY_PRICE AS PRODUCT_DELIVERY_PRICE,
		        O.ORDER_GOODS_QTY 		 AS ORDER_GOODS_QTY,
		        O.DELIVERY_STATE 		 AS DELIVERY_STATE
		FROM
				T_ORDER O
		     INNER JOIN T_MEMBER M 
		             ON M.MEMBER_ID = O.MEMBER_ID
			 INNER JOIN T_PRODUCT P
					 ON P.PRODUCT_CODE = O.PRODUCT_CODE
		WHERE
			<choose>
				<when test='searchKeyword == "memberId"'>
					M.MEMBER_ID LIKE CONCAT('%' , #{searchWord} , '%')
				</when>	
				<when test='searchKeyword.equals("memberName")'>
					M.MEMBER_NAME LIKE CONCAT('%' , #{searchWord} , '%')
				</when>	
				<when test='searchKeyword.equals("regidence")'>
					M.REGIDENCE LIKE CONCAT('%' , #{searchWord} , '%')
				</when>
				<when test="searchKeyword == 'productName'">
					P.PRODUCT_NAME LIKE CONCAT('%' , #{searchWord} , '%')
				</when>
				<when test="searchKeyword == 'deliveryState'">
					O.DELIVERY_STATE LIKE CONCAT('%' , #{searchWord} , '%')
				</when>
				<otherwise>
					M.MEMBER_ID LIKE CONCAT('%' , #{searchWord} , '%') 	   OR
					M.MEMBER_NAME LIKE CONCAT('%' , #{searchWord} , '%')   OR
					M.REGIDENCE LIKE CONCAT('%' , #{searchWord} , '%')     OR 
					P.PRODUCT_NAME LIKE CONCAT('%' , #{searchWord} , '%')  OR
					O.DELIVERY_STATE LIKE CONCAT('%' , #{searchWord} , '%')
				</otherwise>
			</choose>
			
	</select>

	<select id="chooseEx02" parameterType="String" resultMap="orderMap">
		
		SELECT
				M.MEMBER_ID 			 AS MEMBER_ID,
		        M.MEMBER_NAME 			 AS MEMBER_NAME,
		        M.HP					 AS HP,
		        M.EMAIL					 AS EMAIL,
		        M.REGIDENCE				 AS REGIDENCE,
		        P.PRODUCT_NAME 			 AS PRODUCT_NAME,
		        P.PRODUCT_PRICE 		 AS PRODUCT_PRICE,
		        P.PRODUCT_DELIVERY_PRICE AS PRODUCT_DELIVERY_PRICE,
		        O.ORDER_GOODS_QTY 		 AS ORDER_GOODS_QTY,
		        O.DELIVERY_STATE 		 AS DELIVERY_STATE
		FROM
				T_ORDER O
		     INNER JOIN T_MEMBER M 
		             ON M.MEMBER_ID = O.MEMBER_ID
			 INNER JOIN T_PRODUCT P
					 ON P.PRODUCT_CODE = O.PRODUCT_CODE
		WHERE
			<choose>
				<when test='deliveryState == "배송완료"'>
					O.DELIVERY_STATE = '배송완료'
				</when>
				<otherwise>
					O.DELIVERY_STATE != '배송완료'
				</otherwise>
			</choose>
						
	</select>

	<!-- 
	
		# foreach
	
		- 목록형 데이터로 SQL문을 만들때 사용한다.
		
			[ 속성 ]
		
		    collection="목록"	: 전달받은 List 및 Array 객체 지정
		    item="항목"			: 한 개의 항목을 가리키는 변수 이름 지정
		    separator="구분자"  : 반복 되는 명령어 사이에 구분자 문자열을 지정
		    index="인덱스"      : 인덱스 값을 지정할때 사용할 변수 이름 지정(0부터 순차적으로 증가)
		    open="시작문자열"   : 최종 반환값의 접두어 지정  (IN(값, 값, ...) 조건을 만들 때 편리)
		    close="종료문자열"	: 최종 반환값의 접미어 지정
			
	-->
	
	<insert id="foreachEx">
	
		INSERT INTO
				T_PRODUCT
		VALUES
		<foreach collection="list" item="productDto" separator=",">
			(
				#{productDto.productCode} , 
				#{productDto.productName} , 
				#{productDto.productPrice} , 
				#{productDto.productDeliveryPrice}
			)
		</foreach>
	
	</insert>

	<!-- 
	
		# <where>
		
		- <where>는 단독으로 사용되지 않고<if>, <choose>와 같은 태그들을 내포하여 SQL들을 연결하여 준다.
		- 앞 뒤에 필요한 구문들(AND, OR, WHERE)을 추가하거나 생략하는 역할을 한다.
	
	 -->
	 
	 <select id="whereEx" parameterType="OrderDto" resultType="OrderDto">
	 	
	 	<!-- 에러 발생 -->
	 	<!--  
	 	SELECT
	 			*
	 	FROM
	 			T_ORDER
	 	WHERE
	 			<if test='memberId != null and memberId != ""'>
	 				MEMBER_ID = #{memberId}
	 			</if>
	 			<if test='productCode != null and productCode != ""'>
	 				AND PRODUCT_CODE = #{productCode}
	 			</if>
	 	-->
	 	
	 	<!-- 정상 동작 -->		
	 	SELECT
	 			*
	 	FROM
	 			T_ORDER
	 	<where>
	 			<if test='memberId != null and memberId != ""'>
	 				MEMBER_ID = #{memberId}
	 			</if>
	 			<if test='productCode != null and productCode != ""'>
	 				AND PRODUCT_CODE = #{productCode}
	 			</if>
	 	</where>
	 	
	 </select>
	 
	<!-- 
	
		# <set>
		
		- <set>은 단독으로 사용되지 않고<if>, <choose>와 같은 태그들을 내포하여 SQL들을 연결하여 준다.
		- 앞 뒤에 필요없는 구문(,)을 생략하여 준다.
	
	 -->

	<update id="setEx" parameterType="ProductDto">
	
		<!-- 에러 발생 -->
		<!-- 
			 UPDATE
					T_PRODUCT
			SET
					<if test='productPrice != 0'>
						PRODUCT_PRICE = #{productPrice} ,
					</if>
					<if test='productDeliveryPrice != 0'>
						PRODUCT_DELIVERY_PRICE = #{productDeliveryPrice}
					</if>
			WHERE
					PRODUCT_CODE = #{productCode}
		 -->
		
		<!-- 정상 동작 -->
		UPDATE
				T_PRODUCT
		<set>
				<if test='productPrice != 0'>
					PRODUCT_PRICE = #{productPrice} ,
				</if>
				<if test='productDeliveryPrice != 0'>
					PRODUCT_DELIVERY_PRICE = #{productDeliveryPrice}
				</if>
		</set>
		WHERE
				PRODUCT_CODE = #{productCode}
		
		
			
	</update>




</mapper>